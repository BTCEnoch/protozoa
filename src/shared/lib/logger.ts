/**
 * Central Winston Logger
 * Auto-generated by 18a-SetupLoggingService.ps1
 */

import { environmentService } from '@/shared/config/environmentService'
import type { LogLevel } from '@/shared/types/loggingTypes'
import { createLogger, format, transports } from 'winston'

const { combine, timestamp, errors, json, colorize, simple, printf, splat } = format

function buildLogger(serviceName = 'protozoa'): ReturnType<typeof createLogger> {
  const env = environmentService.getMode()
  const debugCfg = environmentService.getDebugConfig()
  const level: LogLevel = (debugCfg.verbose ? 'debug' : 'info') as LogLevel

  const baseTransports: any[] = [
    new transports.Console({
      format: combine(
        colorize(),
        simple(),
        splat(),
        printf(({ level, message }) => `${level}: ${message}`)
      )
    })
  ]

  if (environmentService.isProduction()) {
    baseTransports.push(
      new transports.File({ filename: 'logs/error.log', level: 'error' }),
      new transports.File({ filename: 'logs/combined.log' })
    )
  }

  return createLogger({
    level,
    format: combine(timestamp(), errors({ stack: true }), splat(), json()),
    defaultMeta: { service: serviceName, env },
    transports: baseTransports
  })
}

export const logger = buildLogger()
export function createServiceLogger(service: string) {
  return logger.child({ service })
}

/**
 * Create a performance logger (DEBUG level recommended)
 */
export function createPerformanceLogger(service: string) {
  return logger.child({ service, scope: 'performance' })
}

/**
 * Create an error-first logger helper
 * Provides `.logError(err, meta?)` shorthand on top of Winston child logger
 */
export function createErrorLogger(service: string) {
  const child = logger.child({ service, scope: 'error' })
  return {
    ...child,
    logError: (error: Error, meta: Record<string, unknown> = {}) => {
      child.error(error.message, { ...meta, stack: error.stack })
    }
  }
}
