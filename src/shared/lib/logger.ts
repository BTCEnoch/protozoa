/**
 * Central Winston Logger
 * Auto-generated by 18a-SetupLoggingService.ps1
 */

import { createLogger, format, transports } from 'winston'
import { environmentService } from '@/shared/config/environmentService'
import type { LogLevel } from '@/shared/types/loggingTypes'

const { combine, timestamp, errors, json, colorize, simple, printf, splat } = format

function buildLogger(serviceName = 'protozoa'): ReturnType<typeof createLogger> {
  const env = environmentService.getMode()
  const debugCfg = environmentService.getDebugConfig()
  const level: LogLevel = (debugCfg.verbose ? 'debug' : 'info') as LogLevel

  const baseTransports: any[] = [
    new transports.Console({
      format: combine(colorize(), simple(), splat(), printf(({ level, message }) => $: {message}))
    })
  ]

  if (environmentService.isProduction()) {
    baseTransports.push(
      new transports.File({ filename: 'logs/error.log', level: 'error' }),
      new transports.File({ filename: 'logs/combined.log' })
    )
  }

  return createLogger({
    level,
    format: combine(timestamp(), errors({ stack: true }), splat(), json()),
    defaultMeta: { service: serviceName, env },
    transports: baseTransports
  })
}

export const logger = buildLogger()
export function createServiceLogger(service: string) {
  return logger.child({ service })
}
