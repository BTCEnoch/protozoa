/**
 * @fileoverview Effect Types
 * @description Type definitions for the Effect domain
 * @author Protozoa Development Team
 * @version 1.0.0
 */

import { Vector3, Color, Material, BufferGeometry, Texture } from 'three'

/**
 * Effect categories for organization
 */
export type EffectCategory = 
  | 'mutation'
  | 'evolution'
  | 'formation'
  | 'particle'
  | 'environmental'
  | 'transition'

/**
 * Effect animation curve types
 */
export type AnimationCurve = 
  | 'linear'
  | 'easeIn'
  | 'easeOut'
  | 'easeInOut'
  | 'bounce'
  | 'elastic'
  | 'exponential'

/**
 * Effect blend modes for visual composition
 */
export type BlendMode = 
  | 'normal'
  | 'additive'
  | 'multiply'
  | 'screen'
  | 'overlay'
  | 'soft-light'
  | 'hard-light'

/**
 * Effect trigger conditions
 */
export type EffectTrigger = 
  | 'immediate'
  | 'delayed'
  | 'on_trait_change'
  | 'on_mutation'
  | 'on_evolution'
  | 'on_formation_change'
  | 'on_collision'
  | 'on_timer'

/**
 * Effect state enumeration
 */
export enum EffectState {
  INACTIVE = 'inactive',
  STARTING = 'starting',
  ACTIVE = 'active',
  FINISHING = 'finishing',
  COMPLETED = 'completed',
  PAUSED = 'paused',
  ERROR = 'error'
}

/**
 * Effect priority levels
 */
export enum EffectPriority {
  LOW = 1,
  NORMAL = 2,
  HIGH = 3,
  CRITICAL = 4
}

/**
 * Color animation keyframe
 */
export interface IColorKeyframe {
  time: number // 0.0 to 1.0
  color: string
  alpha: number
}

/**
 * Scale animation keyframe
 */
export interface IScaleKeyframe {
  time: number // 0.0 to 1.0
  scale: Vector3
}

/**
 * Position animation keyframe
 */
export interface IPositionKeyframe {
  time: number // 0.0 to 1.0
  position: Vector3
  curve?: AnimationCurve
}

/**
 * Effect animation timeline
 */
export interface IEffectAnimation {
  colorKeyframes?: IColorKeyframe[]
  scaleKeyframes?: IScaleKeyframe[]
  positionKeyframes?: IPositionKeyframe[]
  rotationKeyframes?: Array<{
    time: number
    rotation: Vector3
  }>
  opacityKeyframes?: Array<{
    time: number
    opacity: number
  }>
}

/**
 * Effect particle configuration
 */
export interface IEffectParticleConfig {
  count: number
  size: number
  sizeVariation: number
  velocity: Vector3
  velocityVariation: Vector3
  acceleration: Vector3
  lifetime: number
  lifetimeVariation: number
  emissionRate: number
  shape: 'sphere' | 'box' | 'cone' | 'disc' | 'line'
  shapeSize: Vector3
}

/**
 * Effect shader configuration
 */
export interface IEffectShaderConfig {
  vertexShader?: string
  fragmentShader?: string
  uniforms?: Record<string, any>
  transparent?: boolean
  depthTest?: boolean
  depthWrite?: boolean
  blending?: BlendMode
}

/**
 * Effect resource reference
 */
export interface IEffectResource {
  id: string
  type: 'texture' | 'material' | 'geometry' | 'shader'
  resource: Texture | Material | BufferGeometry | string
  isLoaded: boolean
  size?: number // Memory footprint in bytes
}

/**
 * Effect template for reusable configurations
 */
export interface IEffectTemplate {
  id: string
  name: string
  category: EffectCategory
  description: string
  defaultConfig: IEffectConfig
  requiredResources: string[]
  tags: string[]
  previewImage?: string
}

/**
 * Extended effect configuration
 */
export interface IEffectConfig {
  duration: number
  intensity: number
  fadeIn: number
  fadeOut: number
  scale: Vector3
  color: string
  opacity: number
  particleCount?: number
  animationSpeed?: number
  blendMode?: BlendMode
  priority?: EffectPriority
  category?: EffectCategory
  animation?: IEffectAnimation
  particles?: IEffectParticleConfig
  shader?: IEffectShaderConfig
  resources?: string[] // Resource IDs to load
  loop?: boolean
  autoRemove?: boolean
  maxDistance?: number // Culling distance
  lodLevels?: Array<{
    distance: number
    quality: number
  }>
}

/**
 * Effect context for environmental data
 */
export interface IEffectContext {
  timestamp: number
  frameRate: number
  deltaTime: number
  cameraPosition: Vector3
  cameraTarget: Vector3
  ambientLight: Color
  environmentalFactors: {
    gravity: Vector3
    wind: Vector3
    temperature: number
    pressure: number
  }
}

/**
 * Effect event for callbacks
 */
export interface IEffectEvent {
  type: 'start' | 'update' | 'complete' | 'error' | 'pause' | 'resume'
  effectId: string
  timestamp: number
  data?: any
}

/**
 * Effect performance profile
 */
export interface IEffectPerformanceProfile {
  effectId: string
  frameTime: number
  gpuTime: number
  memoryUsage: number
  particleCount: number
  drawCalls: number
  triangleCount: number
}

/**
 * Effect LOD (Level of Detail) configuration
 */
export interface IEffectLOD {
  distance: number
  particleReduction: number // 0.0 to 1.0
  qualityReduction: number // 0.0 to 1.0
  disableShaders: boolean
}

/**
 * Mutation effect mapping
 */
export interface IMutationEffectMapping {
  traitName: string
  effectTemplate: string
  intensityMapping: (oldValue: any, newValue: any) => number
  colorMapping?: (oldValue: any, newValue: any) => string
  durationMapping?: (oldValue: any, newValue: any) => number
  condition?: (oldValue: any, newValue: any) => boolean
}

/**
 * Effect pool configuration for object reuse
 */
export interface IEffectPoolConfig {
  initialSize: number
  maxSize: number
  growthFactor: number
  shrinkThreshold: number
  preloadTypes: EffectType[]
}

/**
 * Re-export from interface for convenience
 */
export type EffectType = 
  | 'nebula_burst'
  | 'type_change_transition' 
  | 'evolution_pulse'
  | 'mutation_sparkle'
  | 'formation_shift'
  | 'particle_trail'
  | 'energy_wave'
  | 'dissolve_effect'

/**
 * Effect update callback type
 */
export type EffectUpdateCallback = (progress: number, context: IEffectContext) => void

/**
 * Effect completion callback type
 */
export type EffectCompletionCallback = (effectId: string, cancelled: boolean) => void

/**
 * Effect error callback type
 */
export type EffectErrorCallback = (effectId: string, error: Error) => void

/**
 * Effect event callback type
 */
export type EffectEventCallback = (event: IEffectEvent) => void 