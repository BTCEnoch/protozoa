/**
 * @fileoverview Physics Service Implementation (Template)
 * @module @/domains/physics/services/PhysicsService
 * @version 1.0.0
 */

import { Vector3, Matrix4, Quaternion } from "three"
import type {
  IPhysicsService,
  PhysicsConfig,
  ParticlePhysics,
  Transform,
  PhysicsMetrics
} from "@/domains/physics/interfaces/IPhysicsService"
import type {
  PhysicsState,
  DistributionPattern,
  GeometryBounds
} from "@/domains/physics/types/physics.types"
import { createServiceLogger } from "@/shared/lib/logger"

/**
 * PhysicsService – provides lightweight kinematic helpers and geometry utilities.
 * Note: Complex force-field simulation is delegated to the Formation/Animation domains.
 */
export class PhysicsService implements IPhysicsService {
  /* ------------------------------- singleton ------------------------------- */
  static #instance: PhysicsService | null = null
  public static getInstance(): PhysicsService {
    if (!PhysicsService.#instance) PhysicsService.#instance = new PhysicsService()
    return PhysicsService.#instance
  }
  private constructor() {
    this.#logger.info("PhysicsService instantiated (kinematic-only mode)")
  }

  /* ------------------------------ private data ----------------------------- */
  #logger = createServiceLogger("PHYSICS_SERVICE")

  #config: PhysicsConfig = {
    targetFPS: 60,
    gravity: -9.81,
    damping: 0.99
  }

  #state: PhysicsState = {
    isRunning: false,
    simulationTime: 0,
    lastDeltaTime: 0,
    algorithm: "euler",
    collisionMethod: "basic",
    activeParticles: 0
  }

  #metrics: PhysicsMetrics = {
    currentFPS: 0,
    averageFrameTime: 0,
    transformCalculations: 0,
    geometryOperations: 0,
    memoryUsage: 0
  }

  #frameTimes: number[] = []

  /* --------------------------- public I/F methods -------------------------- */
  async initialize(config?: PhysicsConfig): Promise<void> {
    this.#logger.info("Initializing PhysicsService", { config })
    if (config) this.#config = { ...this.#config, ...config }
    this.#state.isRunning = true
  }

  applyGravity(p: ParticlePhysics, dt: number): void {
    if (!p.useGravity) return
    p.acceleration.y += (this.#config.gravity || -9.81) * dt * 0.001
  }

  distributeParticles(count: number, pattern: string, bounds: Vector3): Vector3[] {
    const start = performance.now()
    let positions: Vector3[]
    switch (pattern as DistributionPattern) {
      case "grid":
        positions = this.#grid(count, bounds)
        break
      case "circle":
        positions = this.#circle(count, bounds)
        break
      case "sphere":
        positions = this.#sphere(count, bounds)
        break
      case "fibonacci":
        positions = this.#fibonacciSphere(count, bounds.x * 0.5)
        break
      default:
        positions = this.#random(count, bounds)
    }
    this.#metrics.geometryOperations++
    this.#updateFrameMetrics(performance.now() - start)
    return positions
  }

  createTransform(position: Vector3, rotation: any, scale: Vector3): Transform {
    const matrix = new Matrix4().compose(
      position,
      new Quaternion(rotation.x, rotation.y, rotation.z, rotation.w),
      scale
    )
    this.#metrics.transformCalculations++
    return { position: position.clone(), rotation: { ...rotation }, scale: scale.clone(), matrix: new Float32Array(matrix.elements) }
  }

  interpolateTransform(from: Transform, to: Transform, alpha: number): Transform {
    const t = Math.max(0, Math.min(1, alpha))
    const pos = from.position.clone().lerp(to.position, t)
    const scl = from.scale.clone().lerp(to.scale, t)
    const rq1 = new Quaternion(from.rotation.x, from.rotation.y, from.rotation.z, from.rotation.w)
    const rq2 = new Quaternion(to.rotation.x, to.rotation.y, to.rotation.z, to.rotation.w)
    const rot = rq1.slerp(rq2, t)
    return this.createTransform(pos, rot, scl)
  }

  getMetrics(): PhysicsMetrics {
    return { ...this.#metrics }
  }

  reset(): void {
    this.#state.simulationTime = 0
    this.#state.lastDeltaTime = 0
    this.#frameTimes.length = 0
    this.#metrics = { ...this.#metrics, currentFPS: 0, averageFrameTime: 0 }
    this.#logger.info("PhysicsService state reset")
  }

  dispose(): void {
    this.reset()
    PhysicsService.#instance = null
    this.#logger.info("PhysicsService disposed – singleton reset")
  }

  /**
   * Update multiple particles with physics simulation
   * @param particles - Array of particles to update
   * @param deltaTime - Time delta in seconds
   */
  updateParticles(particles: ParticlePhysics[], deltaTime: number): void {
    const start = performance.now()
    
    for (const particle of particles) {
      if (!particle) continue
      
      // Apply gravity
      this.applyGravity(particle, deltaTime)
      
      // Update velocity with acceleration
      particle.velocity.x += particle.acceleration.x * deltaTime
      particle.velocity.y += particle.acceleration.y * deltaTime
      particle.velocity.z += particle.acceleration.z * deltaTime
      
      // Apply damping
      particle.velocity.multiplyScalar(this.#config.damping || 0.99)
      
      // Update position with velocity
      particle.position.x += particle.velocity.x * deltaTime
      particle.position.y += particle.velocity.y * deltaTime
      particle.position.z += particle.velocity.z * deltaTime
      
      // Reset acceleration for next frame
      particle.acceleration.set(0, 0, 0)
    }
    
    this.#metrics.transformCalculations += particles.length
    this.#updateFrameMetrics(performance.now() - start)
    this.#logger.debug(`Updated ${particles.length} particles in ${(performance.now() - start).toFixed(2)}ms`)
  }

  /**
   * Broad phase collision detection using spatial partitioning
   * @param particles - Array of particles to check
   * @returns Array of potential collision pairs
   */
  broadPhaseCollision(particles: ParticlePhysics[]): Array<[ParticlePhysics, ParticlePhysics]> {
    const pairs: Array<[ParticlePhysics, ParticlePhysics]> = []
    const start = performance.now()
    
    // Simple O(n²) approach for now - can be optimized with spatial structures
    for (let i = 0; i < particles.length; i++) {
      for (let j = i + 1; j < particles.length; j++) {
        const p1 = particles[i]
        const p2 = particles[j]
        
        if (!p1 || !p2) continue
        
        const dx = p1.position.x - p2.position.x
        const dy = p1.position.y - p2.position.y
        const dz = p1.position.z - p2.position.z
        const distanceSquared = dx * dx + dy * dy + dz * dz
        const combinedRadius = (p1.radius || 1) + (p2.radius || 1)
        
        if (distanceSquared < combinedRadius * combinedRadius) {
          pairs.push([p1, p2])
        }
      }
    }
    
    this.#updateFrameMetrics(performance.now() - start)
    return pairs
  }

  /**
   * Calculate gravitational forces between particles
   * @param particles - Array of particles
   */
  calculateGravitationalForces(particles: ParticlePhysics[]): void {
    const G = 6.67430e-11 // Gravitational constant (scaled for simulation)
    const start = performance.now()
    
    for (let i = 0; i < particles.length; i++) {
      for (let j = i + 1; j < particles.length; j++) {
        const p1 = particles[i]
        const p2 = particles[j]
        
        if (!p1 || !p2 || !p1.useGravity || !p2.useGravity) continue
        
        const dx = p2.position.x - p1.position.x
        const dy = p2.position.y - p1.position.y
        const dz = p2.position.z - p1.position.z
        const distanceSquared = dx * dx + dy * dy + dz * dz
        const distance = Math.sqrt(distanceSquared)
        
        if (distance > 0) {
          const force = G * (p1.mass || 1) * (p2.mass || 1) / distanceSquared
          const fx = (dx / distance) * force
          const fy = (dy / distance) * force
          const fz = (dz / distance) * force
          
          // Apply equal and opposite forces
          p1.acceleration.x += fx / (p1.mass || 1)
          p1.acceleration.y += fy / (p1.mass || 1)
          p1.acceleration.z += fz / (p1.mass || 1)
          
          p2.acceleration.x -= fx / (p2.mass || 1)
          p2.acceleration.y -= fy / (p2.mass || 1)
          p2.acceleration.z -= fz / (p2.mass || 1)
        }
      }
    }
    
    this.#updateFrameMetrics(performance.now() - start)
  }

  /**
   * Create octree for spatial partitioning
   * @param center - Center point of the octree
   * @param size - Size of the octree
   * @returns Simple octree structure
   */
  createOctree(center: Vector3, size: number): any {
    return {
      center: center.clone(),
      size,
      particles: [] as ParticlePhysics[],
      children: null as any[] | null,
      divided: false
    }
  }

  /**
   * Insert particle into octree
   * @param octree - Octree to insert into
   * @param particle - Particle to insert
   */
  insertIntoOctree(octree: any, particle: ParticlePhysics): void {
    // Simple implementation - can be expanded
    if (!this.#pointInBounds(particle.position, octree.center, octree.size)) {
      return
    }
    
    octree.particles.push(particle)
  }

  /**
   * Narrow phase collision detection with detailed collision response
   * @param pairs - Array of collision pairs from broad phase
   */
  narrowPhaseCollision(pairs: Array<[ParticlePhysics, ParticlePhysics]>): void {
    const start = performance.now()
    
    for (const [p1, p2] of pairs) {
      if (!p1 || !p2) continue
      
      const dx = p1.position.x - p2.position.x
      const dy = p1.position.y - p2.position.y
      const dz = p1.position.z - p2.position.z
      const distance = Math.sqrt(dx * dx + dy * dy + dz * dz)
      const combinedRadius = (p1.radius || 1) + (p2.radius || 1)
      
      if (distance < combinedRadius && distance > 0) {
        // Normalize collision vector
        const nx = dx / distance
        const ny = dy / distance
        const nz = dz / distance
        
        // Separate particles
        const overlap = combinedRadius - distance
        const separation = overlap * 0.5
        
        p1.position.x += nx * separation
        p1.position.y += ny * separation
        p1.position.z += nz * separation
        
        p2.position.x -= nx * separation
        p2.position.y -= ny * separation
        p2.position.z -= nz * separation
        
        // Apply collision response (elastic collision)
        const restitution = 0.8
        const relativeVelocity = {
          x: p1.velocity.x - p2.velocity.x,
          y: p1.velocity.y - p2.velocity.y,
          z: p1.velocity.z - p2.velocity.z
        }
        
        const velocityAlongNormal = relativeVelocity.x * nx + relativeVelocity.y * ny + relativeVelocity.z * nz
        
        if (velocityAlongNormal > 0) continue // Objects separating
        
        const impulse = -(1 + restitution) * velocityAlongNormal / ((p1.mass || 1) + (p2.mass || 1))
        
        p1.velocity.x += impulse * (p2.mass || 1) * nx
        p1.velocity.y += impulse * (p2.mass || 1) * ny
        p1.velocity.z += impulse * (p2.mass || 1) * nz
        
        p2.velocity.x -= impulse * (p1.mass || 1) * nx
        p2.velocity.y -= impulse * (p1.mass || 1) * ny
        p2.velocity.z -= impulse * (p1.mass || 1) * nz
      }
    }
    
    this.#updateFrameMetrics(performance.now() - start)
  }

  /**
   * Calculate electromagnetic forces between charged particles
   * @param particles - Array of particles with charge property
   */
  calculateElectromagneticForces(particles: ParticlePhysics[]): void {
    const k = 8.9875517923e9 // Coulomb's constant (scaled for simulation)
    const start = performance.now()
    
    for (let i = 0; i < particles.length; i++) {
      for (let j = i + 1; j < particles.length; j++) {
        const p1 = particles[i]
        const p2 = particles[j]
        
        if (!p1 || !p2) continue
        
        const charge1 = (p1 as any).charge || 0
        const charge2 = (p2 as any).charge || 0
        
        if (charge1 === 0 || charge2 === 0) continue
        
        const dx = p2.position.x - p1.position.x
        const dy = p2.position.y - p1.position.y
        const dz = p2.position.z - p1.position.z
        const distanceSquared = dx * dx + dy * dy + dz * dz
        const distance = Math.sqrt(distanceSquared)
        
        if (distance > 0) {
          const force = k * charge1 * charge2 / distanceSquared
          const fx = (dx / distance) * force
          const fy = (dy / distance) * force
          const fz = (dz / distance) * force
          
          // Apply forces (like charges repel, unlike charges attract)
          p1.acceleration.x -= fx / (p1.mass || 1)
          p1.acceleration.y -= fy / (p1.mass || 1)
          p1.acceleration.z -= fz / (p1.mass || 1)
          
          p2.acceleration.x += fx / (p2.mass || 1)
          p2.acceleration.y += fy / (p2.mass || 1)
          p2.acceleration.z += fz / (p2.mass || 1)
        }
      }
    }
    
    this.#updateFrameMetrics(performance.now() - start)
  }

  /**
   * Query octree for particles in a region
   * @param octree - Octree to query
   * @param region - Query region bounds
   * @returns Array of particles in the region
   */
  queryOctree(octree: any, region: { center: Vector3; size: number }): ParticlePhysics[] {
    const result: ParticlePhysics[] = []
    
    // Simple implementation - check if octree intersects with query region
    if (this.#octreeIntersects(octree, region)) {
      result.push(...octree.particles)
      
      if (octree.children) {
        for (const child of octree.children) {
          result.push(...this.queryOctree(child, region))
        }
      }
    }
    
    return result
  }

  /* ---------------------------- private helpers --------------------------- */
  #updateFrameMetrics(frameMs: number) {
    this.#frameTimes.push(frameMs)
    if (this.#frameTimes.length > 120) this.#frameTimes.shift()
    const sum = this.#frameTimes.reduce((a, b) => a + b, 0)
    this.#metrics.averageFrameTime = sum / this.#frameTimes.length
    this.#metrics.currentFPS = this.#metrics.averageFrameTime > 0 ? 1000 / this.#metrics.averageFrameTime : 0
  }

  #random(count: number, b: Vector3): Vector3[] {
    const arr: Vector3[] = []
    for (let i = 0; i < count; i++) {
      arr.push(new Vector3((Math.random() - 0.5) * b.x, (Math.random() - 0.5) * b.y, (Math.random() - 0.5) * b.z))
    }
    return arr
  }

  #grid(count: number, b: Vector3): Vector3[] {
    const positions: Vector3[] = []
    const side = Math.ceil(Math.cbrt(count))
    const spacing = new Vector3(b.x / side, b.y / side, b.z / side)
    for (let x = 0; x < side; x++)
      for (let y = 0; y < side; y++)
        for (let z = 0; z < side && positions.length < count; z++) {
          positions.push(new Vector3((x - side / 2) * spacing.x, (y - side / 2) * spacing.y, (z - side / 2) * spacing.z))
        }
    return positions
  }

  #circle(count: number, b: Vector3): Vector3[] {
    const radius = Math.min(b.x, b.y) * 0.5
    const positions: Vector3[] = []
    for (let i = 0; i < count; i++) {
      const angle = (i / count) * Math.PI * 2
      positions.push(new Vector3(Math.cos(angle) * radius, 0, Math.sin(angle) * radius))
    }
    return positions
  }

  #sphere(count: number, b: Vector3): Vector3[] {
    const radius = Math.min(b.x, b.y, b.z) * 0.5
    const positions: Vector3[] = []
    for (let i = 0; i < count; i++) {
      const u = Math.random()
      const v = Math.random()
      const theta = 2 * Math.PI * u
      const phi = Math.acos(2 * v - 1)
      positions.push(
        new Vector3(
          radius * Math.sin(phi) * Math.cos(theta),
          radius * Math.sin(phi) * Math.sin(theta),
          radius * Math.cos(phi)
        )
      )
    }
    return positions
  }

  // Fibonacci sphere distribution for uniformity
  #fibonacciSphere(count: number, radius: number): Vector3[] {
    const positions: Vector3[] = []
    const offset = 2 / count
    const increment = Math.PI * (3 - Math.sqrt(5))
    for (let i = 0; i < count; i++) {
      const y = i * offset - 1 + offset / 2
      const r = Math.sqrt(1 - y * y)
      const phi = i * increment
      positions.push(new Vector3(Math.cos(phi) * r * radius, y * radius, Math.sin(phi) * r * radius))
    }
    return positions
  }

  /**
   * Check if point is within bounds
   * @param point - Point to check
   * @param center - Center of bounds
   * @param size - Size of bounds
   * @returns True if point is within bounds
   */
  #pointInBounds(point: Vector3, center: Vector3, size: number): boolean {
    const halfSize = size * 0.5
    return (
      point.x >= center.x - halfSize && point.x <= center.x + halfSize &&
      point.y >= center.y - halfSize && point.y <= center.y + halfSize &&
      point.z >= center.z - halfSize && point.z <= center.z + halfSize
    )
  }

  /**
   * Check if octree intersects with query region
   * @param octree - Octree to check
   * @param region - Query region
   * @returns True if they intersect
   */
  #octreeIntersects(octree: any, region: { center: Vector3; size: number }): boolean {
    const octreeHalfSize = octree.size * 0.5
    const regionHalfSize = region.size * 0.5
    
    return (
      Math.abs(octree.center.x - region.center.x) < octreeHalfSize + regionHalfSize &&
      Math.abs(octree.center.y - region.center.y) < octreeHalfSize + regionHalfSize &&
      Math.abs(octree.center.z - region.center.z) < octreeHalfSize + regionHalfSize
    )
  }
}

// Singleton export
export const physicsService = PhysicsService.getInstance()