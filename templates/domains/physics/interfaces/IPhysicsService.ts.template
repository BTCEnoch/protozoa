/**
 * @fileoverview Physics Service Interface Definition (Template)
 * @module @/domains/physics/interfaces/IPhysicsService
 * @version 1.0.0
 */

import { Vector3 } from "three"

/** Configuration options for PhysicsService */
export interface PhysicsConfig {
  /** Target frame rate for physics calculations */
  targetFPS?: number
  /** Gravity strength (Y axis, negative is downward) */
  gravity?: number
  /** Linear damping factor applied each update */
  damping?: number
}

/** Core kinematic state for a single particle */
export interface ParticlePhysics {
  position: Vector3
  velocity: Vector3
  acceleration: Vector3
  mass: number
  radius: number
  useGravity: boolean
}

/** Transform helper returned by createTransform */
export interface Transform {
  position: Vector3
  rotation: { x: number; y: number; z: number; w: number }
  scale: Vector3
  /** Flattened 4Ã—4 matrix elements */
  matrix: Float32Array
}

/** Simplified performance metrics reported by PhysicsService */
export interface PhysicsMetrics {
  currentFPS: number
  averageFrameTime: number
  transformCalculations: number
  geometryOperations: number
  memoryUsage: number
}

/** Primary PhysicsService contract */
export interface IPhysicsService {
  initialize(config?: PhysicsConfig): Promise<void>
  applyGravity(particle: ParticlePhysics, deltaTime: number): void
  distributeParticles(count: number, pattern: string, bounds: Vector3): Vector3[]
  createTransform(position: Vector3, rotation: any, scale: Vector3): Transform
  interpolateTransform(from: Transform, to: Transform, alpha: number): Transform
  getMetrics(): PhysicsMetrics
  reset(): void
  dispose(): void
  
  /**
   * Update multiple particles with physics simulation
   * @param particles - Array of particles to update
   * @param deltaTime - Time delta in seconds
   */
  updateParticles(particles: ParticlePhysics[], deltaTime: number): void
  
  /**
   * Broad phase collision detection using spatial partitioning
   * @param particles - Array of particles to check
   * @returns Array of potential collision pairs
   */
  broadPhaseCollision(particles: ParticlePhysics[]): Array<[ParticlePhysics, ParticlePhysics]>
  
  /**
   * Calculate gravitational forces between particles
   * @param particles - Array of particles
   */
  calculateGravitationalForces(particles: ParticlePhysics[]): void
  
  /**
   * Create octree for spatial partitioning
   * @param center - Center point of the octree
   * @param size - Size of the octree
   * @returns Simple octree structure
   */
  createOctree(center: Vector3, size: number): any
  
  /**
   * Insert particle into octree
   * @param octree - Octree to insert into
   * @param particle - Particle to insert
   */
  insertIntoOctree(octree: any, particle: ParticlePhysics): void
  
  /**
   * Narrow phase collision detection with detailed collision response
   * @param pairs - Array of collision pairs from broad phase
   */
  narrowPhaseCollision(pairs: Array<[ParticlePhysics, ParticlePhysics]>): void
  
  /**
   * Calculate electromagnetic forces between charged particles
   * @param particles - Array of particles with charge property
   */
  calculateElectromagneticForces(particles: ParticlePhysics[]): void
  
  /**
   * Query octree for particles in a region
   * @param octree - Octree to query
   * @param region - Query region bounds
   * @returns Array of particles in the region
   */
  queryOctree(octree: any, region: { center: Vector3; size: number }): ParticlePhysics[]
}