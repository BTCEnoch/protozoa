import { createServiceLogger } from '@/shared/lib/logger'
import { groupService } from '@/domains/group/services/GroupService'
import { physicsService } from '@/domains/physics/services/PhysicsService'
import type { ISwarmService } from '@/domains/group/interfaces/ISwarmService'

export class SwarmService implements ISwarmService {
  static #instance: SwarmService | null = null
  #log = createServiceLogger('SWARM')
  private constructor () {}
  static getInstance () {
    return this.#instance ?? (this.#instance = new SwarmService())
  }
  update (delta: number) {
    // simple flocking placeholder: iterate groups
    const groups = groupService.getAllGroups()
    groups.forEach((group) => {
      // placeholder physics influence - apply forces to group members
      group.members.forEach((particleId) => {
        // In full implementation: apply swarm forces to individual particles
        this.#log.debug('Applying swarm forces to particle', { particleId, groupId: group.id })
      })
    })
    this.#log.debug('Swarm update completed', { delta, groupCount: groups.length })
  }
  dispose () {
    SwarmService.#instance = null
  }
}
export const swarmService = SwarmService.getInstance()