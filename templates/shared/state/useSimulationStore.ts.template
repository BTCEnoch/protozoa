/**
 * @fileoverview Simulation Store - Zustand State Management
 * @description Global state management for simulation control and formation patterns
 * @author Protozoa Development Team
 * @version 1.0.0
 */

import { create } from 'zustand'

/**
 * Simulation control state interface
 * Extended to include all simulation control properties and methods
 */
export interface SimulationState { 
  /** Whether simulation is currently running */
  running: boolean
  /** Whether simulation is currently paused */
  isRunning: boolean
  /** Whether simulation is currently paused */
  isPaused: boolean
  /** Simulation speed multiplier */
  speed: number
  /** Time scale factor for simulation */
  timeScale: number
  /** Currently active formation pattern ID */
  formation: string | null
  /** Background color for the simulation scene */
  backgroundColor: string
  /** Ambient light intensity */
  ambientLight: number
  /** World size bounds */
  worldSize: number
  /** Whether to show wireframe rendering */
  showWireframe: boolean
  
  /** Set simulation running state */
  setRunning: (running: boolean) => void
  /** Set active formation pattern */
  setFormation: (formation: string | null) => void
  /** Start the simulation */
  startSimulation: () => void
  /** Pause the simulation */
  pauseSimulation: () => void
  /** Stop the simulation */
  stopSimulation: () => void
  /** Set simulation speed */
  setSpeed: (speed: number) => void
  /** Set time scale */
  setTimeScale: (scale: number) => void
  /** Update frame rate metrics */
  updateFrameRate: (fps: number) => void
  /** Update render time metrics */
  updateRenderTime: (time: number) => void
}

/**
 * Simulation store using Zustand v4 syntax
 * Manages global simulation state and formation patterns across the application
 */
export const useSimulationStore = create<SimulationState>()((set, get) => ({
  // State
  running: false,
  isRunning: false,
  isPaused: false,
  speed: 1.0,
  timeScale: 1.0,
  formation: null,
  backgroundColor: '#000011',
  ambientLight: 0.4,
  worldSize: 100,
  showWireframe: false,
  
  // Actions
  setRunning: (running: boolean) => set({ running, isRunning: running }),
  setFormation: (formation: string | null) => set({ formation }),
  startSimulation: () => set({ running: true, isRunning: true, isPaused: false }),
  pauseSimulation: () => set({ isPaused: true, isRunning: false }),
  stopSimulation: () => set({ running: false, isRunning: false, isPaused: false }),
  setSpeed: (speed: number) => set({ speed }),
  setTimeScale: (timeScale: number) => set({ timeScale }),
  updateFrameRate: (fps: number) => {
    // Performance metric tracking - can be extended later
    console.debug(`FPS: ${fps}`)
  },
  updateRenderTime: (time: number) => {
    // Performance metric tracking - can be extended later
    console.debug(`Render time: ${time}ms`)
  }
}))