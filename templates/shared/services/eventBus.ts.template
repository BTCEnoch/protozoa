/**
 * @fileoverview Event Bus Service
 * @description Simple event bus for inter-service communication
 * @author Protozoa Development Team
 */

export class EventBus {
  private static instance: EventBus | null = null
  private listeners: Map<string, Array<(payload?: unknown) => void>> = new Map()

  private constructor() {}

  static getInstance(): EventBus {
    if (!EventBus.instance) {
      EventBus.instance = new EventBus()
    }
    return EventBus.instance
  }

  emitEvent(event: string, payload?: unknown): void {
    const eventListeners = this.listeners.get(event)
    if (eventListeners) {
      eventListeners.forEach(listener => {
        try {
          listener(payload)
        } catch (error) {
          console.error(`Error in event listener for ${event}:`, error)
        }
      })
    }
  }

  addEventListener(event: string, listener: (payload?: unknown) => void): void {
    if (!this.listeners.has(event)) {
      this.listeners.set(event, [])
    }
    this.listeners.get(event)!.push(listener)
  }

  removeEventListener(event: string, listener: (payload?: unknown) => void): void {
    const eventListeners = this.listeners.get(event)
    if (eventListeners) {
      const index = eventListeners.indexOf(listener)
      if (index > -1) {
        eventListeners.splice(index, 1)
      }
    }
  }

  dispose(): void {
    this.listeners.clear()
    EventBus.instance = null
  }
}

// Export singleton instance for convenience
export const eventBus = EventBus.getInstance() 