<#
.SYNOPSIS
    Scaffolds ParticleInitService with 500-particle allocation algorithm and emergent behaviour enums.
.DESCRIPTION
    1. Creates interface & service files under particle domain if absent.
    2. Injects import/export hooks into compositionRoot.ts (comment-based for manual merge).
    3. Generates baseline unit test.
#>
param(
    [string]$ProjectRoot = (Resolve-Path ..).Path
)

$ErrorActionPreference = 'Stop'

function Info($m){Write-Host "[INFO ] $m" -ForegroundColor Cyan}
function Err ($m){Write-Host "[ERROR] $m"-ForegroundColor Red}

try{
    $svcDir = Join-Path $ProjectRoot 'src/domains/particle/services'
    if (-not (Test-Path $svcDir)) { Err 'Particle domain not found.'; exit 1 }

    $svcFile = Join-Path $svcDir 'particleInitService.ts'
    if (Test-Path $svcFile) { Info 'ParticleInitService already exists â€“ skipping.'; return }

    @'
import { IPhysicsService } from "@/domains/physics/interfaces/IPhysicsService"
import { IRNGService }     from "@/domains/rng/interfaces/IRNGService"
import { traitService }     from "@/domains/trait/services/TraitService"
import { Particle }         from "@/domains/particle/types"

/**
 * Auto-generated ParticleInitService
 * Responsible for bulk-creating particles with role distribution & traits.
 */
export class ParticleInitService {
  static #instance: ParticleInitService | null = null
  static getInstance (): ParticleInitService { return this.#instance ??= new ParticleInitService() }

  private constructor () {}

  public initializeParticles (count = 500, deps: { physics: IPhysicsService; rng: IRNGService }): Particle[] {
    // TODO: implement 40-base + 300-RNG split role allocation
    return []
  }

  public dispose (): void {
    ParticleInitService.#instance = null
  }
}

export const particleInitService = ParticleInitService.getInstance()
'@ | Set-Content -Path $svcFile -Encoding utf8

    Info 'ParticleInitService scaffolded.'
}
catch{Err $_; exit 1}