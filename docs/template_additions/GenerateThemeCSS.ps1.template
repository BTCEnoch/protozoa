<#
.SYNOPSIS
    Generates Tailwind-compatible CSS files for each palette in COLOR_PALETTES.
.DESCRIPTION
    1. Uses ts-node to import `src/shared/data/colorPalettes.ts`.
    2. Iterates palettes and writes `src/assets/themes/<palette>.css`.
    3. Overwrites existing files; uses UTF8 encoding.
    4. Emits Winston-style console logs.
.NOTES
    Auto-generated template – fill in TODOs before use.
#>
Param(
    [string]$ProjectRoot = (Resolve-Path ..).Path
)

$ErrorActionPreference = 'Stop'

# TODO: import logger helper or fallback console functions
function Log-Info($msg)  { Write-Host "[INFO ] $msg"  -ForegroundColor Cyan }
function Log-Error($msg) { Write-Host "[ERROR] $msg" -ForegroundColor Red  }

try {
    # Path resolution
    $palettesTS = Join-Path $ProjectRoot 'src/shared/data/colorPalettes.ts'
    $themeDir   = Join-Path $ProjectRoot 'src/assets/themes'
    if (-not (Test-Path $themeDir)) { New-Item -ItemType Directory -Path $themeDir | Out-Null }

    # Execute TypeScript to obtain COLOR_PALETTES JSON
    $json = npx ts-node -e "import { COLOR_PALETTES } from '$palettesTS'; console.log(JSON.stringify(COLOR_PALETTES))" | ConvertFrom-Json

    foreach ($palette in $json.PSObject.Properties) {
        $name   = $palette.Name
        $colors = $palette.Value
        $cssOut = "/* Auto-generated theme: $name */`n:root {`n"
        foreach ($role in $colors.PSObject.Properties) {
            $cssOut += "    --particle-$($role.Name): $($role.Value);`n"
        }
        $cssOut += "}`n"
        $target = Join-Path $themeDir "$name.css"
        $cssOut | Out-File -FilePath $target -Encoding utf8 -Force
        Log-Info "Theme $name → $target"
    }
}
catch {
    Log-Error $_
    exit 1
}