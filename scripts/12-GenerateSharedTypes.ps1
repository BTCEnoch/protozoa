# 12-GenerateSharedTypes.ps1
# Generates shared types and cross-domain interfaces
# Addresses compliance requirement: Create @/shared/types/ with cross-domain interfaces

param(
    [Parameter(Mandatory = $false)]
    [ValidateNotNullOrEmpty()]
    [string]$ProjectRoot = (Get-Location).Path,
    
    [Parameter(Mandatory = $false)]
    [switch]$WhatIf
)

# Import utilities with error handling
try {
    Import-Module "$PSScriptRoot/utils.psm1" -Force -ErrorAction Stop
} catch {
    Write-Error "Failed to import utils module: $($_.Exception.Message)"
    exit 1
}

Write-StepHeader "SHARED TYPES GENERATION"
Write-InfoLog "Generating cross-domain shared types and interfaces"

# Validate project structure
try {
    Test-ProjectStructure -ProjectRoot $ProjectRoot -ErrorAction Stop
    Write-InfoLog "Project structure validation passed"
} catch {
    Write-ErrorLog "Project structure validation failed: $($_.Exception.Message)"
    exit 1
}

# Define shared types paths
$sharedTypesPath = Join-Path $ProjectRoot "src/shared/types"
$sharedInterfacesPath = Join-Path $ProjectRoot "src/shared/interfaces"

Write-InfoLog "Shared types paths:"
Write-InfoLog "  Types: $sharedTypesPath"
Write-InfoLog "  Interfaces: $sharedInterfacesPath"

# Create directories if they don't exist
$directories = @($sharedTypesPath, $sharedInterfacesPath)
foreach ($dir in $directories) {
    if (-not (Test-Path $dir)) {
        Write-InfoLog "Creating directory: $dir"
        if (-not $WhatIf) {
            New-Item -ItemType Directory -Path $dir -Force | Out-Null
        }
    }
}

# Generate core shared types
$coreTypesContent = @"
/**
 * Core Shared Types
 * Cross-domain type definitions used throughout the application
 * Auto-generated by 12-GenerateSharedTypes.ps1
 */

import { Vector3, Color, Quaternion } from 'three';

// ============================================================================
// CORE GEOMETRIC TYPES
// ============================================================================

export interface IVector3 {
  readonly x: number;
  readonly y: number;
  readonly z: number;
}

export interface IBoundingBox {
  readonly min: IVector3;
  readonly max: IVector3;
}

export interface ITransform {
  readonly position: IVector3;
  readonly rotation: IVector3;
  readonly scale: IVector3;
}

// ============================================================================
// PARTICLE CORE TYPES
// ============================================================================

export interface IParticleCore {
  readonly id: string;
  readonly position: IVector3;
  readonly velocity: IVector3;
  readonly mass: number;
  readonly radius: number;
  readonly age: number;
  readonly lifespan: number;
  readonly isAlive: boolean;
}

export interface IParticleTraits {
  readonly color: string;
  readonly opacity: number;
  readonly energy: number;
  readonly stability: number;
  readonly reactivity: number;
}

// ============================================================================
// FORMATION CORE TYPES
// ============================================================================

export interface IFormationCore {
  readonly id: string;
  readonly name: string;
  readonly positions: IVector3[];
  readonly complexity: number;
}

export interface IFormationMetadata {
  readonly type: FormationType;
  readonly symmetry: SymmetryType;
  readonly density: number;
  readonly scale: number;
}

export type FormationType = 
  | 'spiral' 
  | 'cluster' 
  | 'grid' 
  | 'wave' 
  | 'organic' 
  | 'geometric';

export type SymmetryType = 
  | 'none' 
  | 'radial' 
  | 'bilateral' 
  | 'rotational' 
  | 'translational';

// ============================================================================
// BITCOIN CORE TYPES
// ============================================================================

export interface IBitcoinBlockCore {
  readonly height: number;
  readonly hash: string;
  readonly nonce: number;
  readonly timestamp: number;
}

export interface IOrdinalsInscription {
  readonly id: string;
  readonly content: string;
  readonly contentType: string;
  readonly blockHeight: number;
}

// ============================================================================
// RENDERING CORE TYPES
// ============================================================================

export interface IRenderableObject {
  readonly id: string;
  readonly position: IVector3;
  readonly visible: boolean;
  readonly opacity: number;
}

export interface IMaterial {
  readonly color: string;
  readonly opacity: number;
  readonly metalness?: number;
  readonly roughness?: number;
}

// ============================================================================
// ANIMATION CORE TYPES
// ============================================================================

export interface IAnimationTarget {
  readonly id: string;
  readonly startTime: number;
  readonly duration: number;
  readonly easing: EasingType;
}

export type EasingType = 
  | 'linear' 
  | 'easeIn' 
  | 'easeOut' 
  | 'easeInOut' 
  | 'bounce' 
  | 'elastic';

// ============================================================================
// UTILITY TYPES
// ============================================================================

export interface IDisposable {
  dispose(): void;
}

export interface ICacheable {
  readonly cacheKey: string;
  readonly timestamp: number;
  readonly size: number;
}

export interface IValidatable {
  validate(): boolean;
}

// ============================================================================
// ERROR TYPES
// ============================================================================

export interface IServiceError {
  readonly code: string;
  readonly message: string;
  readonly timestamp: number;
  readonly context?: Record<string, any>;
}

export type ServiceErrorCode = 
  | 'INITIALIZATION_FAILED'
  | 'VALIDATION_ERROR'
  | 'RESOURCE_NOT_FOUND'
  | 'OPERATION_TIMEOUT'
  | 'MEMORY_LIMIT_EXCEEDED'
  | 'NETWORK_ERROR';
"@

$coreTypesFile = Join-Path $sharedTypesPath "core.types.ts"
Write-InfoLog "Generating core shared types: $coreTypesFile"
if (-not $WhatIf) {
    Set-Content -Path $coreTypesFile -Value $coreTypesContent -Encoding UTF8
    Write-SuccessLog "Created core shared types file"
}

# Generate shared service interfaces
$sharedInterfacesContent = @"
/**
 * Shared Service Interfaces
 * Cross-domain service contracts and base interfaces
 * Auto-generated by 12-GenerateSharedTypes.ps1
 */

import { IDisposable, IValidatable, ICacheable, IServiceError } from '@/shared/types/core.types';

// ============================================================================
// BASE SERVICE INTERFACES
// ============================================================================

export interface IBaseService extends IDisposable {
  readonly isInitialized: boolean;
  readonly isDisposed: boolean;
  initialize(): Promise<void> | void;
  dispose(): void;
}

export interface ICacheableService extends IBaseService {
  clearCache(): void;
  getCacheStats(): ICacheStats;
}

export interface ICacheStats {
  readonly size: number;
  readonly maxSize: number;
  readonly hitRate: number;
  readonly missRate: number;
  readonly totalRequests: number;
}

// ============================================================================
// LOGGING INTERFACES
// ============================================================================

export interface ILogger {
  info(message: string, context?: Record<string, any>): void;
  warn(message: string, context?: Record<string, any>): void;
  error(message: string, context?: Record<string, any>): void;
  debug(message: string, context?: Record<string, any>): void;
}

// ============================================================================
// CONFIGURATION INTERFACES
// ============================================================================

export interface IConfigurable {
  configure(config: Record<string, any>): void;
  getConfig(): Record<string, any>;
}

export interface IEnvironmentAware {
  readonly environment: 'development' | 'production' | 'test';
  isProduction(): boolean;
  isDevelopment(): boolean;
}

// ============================================================================
// PERFORMANCE INTERFACES
// ============================================================================

export interface IPerformanceMonitor {
  startTimer(operation: string): string;
  endTimer(timerId: string): number;
  getMetrics(): PerformanceMetrics;
}

export interface PerformanceMetrics {
  readonly averageExecutionTime: number;
  readonly totalOperations: number;
  readonly memoryUsage: number;
  readonly cacheHitRate: number;
}

// ============================================================================
// VALIDATION INTERFACES
// ============================================================================

export interface IValidator<T> {
  validate(item: T): ValidationResult;
  validateBatch(items: T[]): ValidationResult[];
}

export interface ValidationResult {
  readonly isValid: boolean;
  readonly errors: string[];
  readonly warnings: string[];
}

// ============================================================================
// EVENT INTERFACES
// ============================================================================

export interface IEventEmitter {
  on(event: string, listener: (...args: any[]) => void): void;
  off(event: string, listener: (...args: any[]) => void): void;
  emit(event: string, ...args: any[]): void;
}

export interface IEventSubscriber {
  subscribe(event: string, handler: EventHandler): void;
  unsubscribe(event: string, handler: EventHandler): void;
}

export type EventHandler = (...args: any[]) => void;

// ============================================================================
// RESOURCE MANAGEMENT INTERFACES
// ============================================================================

export interface IResourceManager extends IDisposable {
  allocate<T>(resource: T): string;
  deallocate(resourceId: string): void;
  getResourceCount(): number;
  getMemoryUsage(): number;
}

export interface IPoolable {
  reset(): void;
  isInUse(): boolean;
}

export interface IObjectPool<T extends IPoolable> extends IDisposable {
  acquire(): T;
  release(item: T): void;
  size(): number;
  available(): number;
}
"@

$sharedInterfacesFile = Join-Path $sharedInterfacesPath "base.interfaces.ts"
Write-InfoLog "Generating shared interfaces: $sharedInterfacesFile"
if (-not $WhatIf) {
    Set-Content -Path $sharedInterfacesFile -Value $sharedInterfacesContent -Encoding UTF8
    Write-SuccessLog "Created shared interfaces file"
}

# Generate index file for easy imports
$indexContent = @"
/**
 * Shared Types and Interfaces Index
 * Centralized exports for cross-domain types and interfaces
 * Auto-generated by 12-GenerateSharedTypes.ps1
 */

// Core types
export * from './types/core.types';

// Base interfaces
export * from './interfaces/base.interfaces';
"@

$indexFile = Join-Path (Split-Path $sharedTypesPath -Parent) "index.ts"
Write-InfoLog "Generating shared types index: $indexFile"
if (-not $WhatIf) {
    Set-Content -Path $indexFile -Value $indexContent -Encoding UTF8
    Write-SuccessLog "Created shared types index file"
}

# Summary and completion
Write-InfoLog ""
Write-InfoLog "Shared Types Generation Summary:"
Write-InfoLog "  Core Types: $coreTypesFile"
Write-InfoLog "  Interfaces: $sharedInterfacesFile"
Write-InfoLog "  Index: $indexFile"
Write-InfoLog ""

Write-SuccessLog "Shared types and interfaces generation completed!"
Write-InfoLog "Cross-domain types now available at @/shared/types/ and @/shared/interfaces/" 