# 24-GeneratePhysicsService.ps1 - Phase 2 Core Domain Implementation
# Generates PhysicsService domain files from templates (no inline TypeScript)
# Reference: build_design.md Phase 2 conversion guidelines
# Requires PowerShell 5.1 or later

[CmdletBinding(SupportsShouldProcess)]
param(
    [Parameter(Mandatory = $false)]
    [string]$ProjectRoot = $PWD
)

try {
    Import-Module "$PSScriptRoot\utils.psm1" -Force -ErrorAction Stop
} catch {
    Write-Error "Failed to import utilities module: $($_.Exception.Message)"
    exit 1
}

$ErrorActionPreference = "Stop"

try {
    Write-StepHeader "Physics Service Generation - Phase 2 Core Domain Implementation"
    Write-InfoLog "Generating PhysicsService domain files via templates"

    # Domain paths
    $physicsDomainPath = Join-Path $ProjectRoot "src/domains/physics"
    $servicesPath      = Join-Path $physicsDomainPath "services"
    $typesPath         = Join-Path $physicsDomainPath "types"
    $interfacesPath    = Join-Path $physicsDomainPath "interfaces"
    $workersPath       = Join-Path $physicsDomainPath "workers"

    # Ensure directory structure
    Write-InfoLog "Creating Physics domain directory structure"
    foreach ($path in @($servicesPath, $typesPath, $interfacesPath, $workersPath)) {
        New-Item -Path $path -ItemType Directory -Force | Out-Null
    }
    Write-SuccessLog "Physics domain directories created successfully"

    # Helper to copy a template to destination preserving name
    function Copy-Template {
        param(
            [string]$TemplateRel,
            [string]$DestPath
        )
        $templatePath = Join-Path $ProjectRoot $TemplateRel
        Copy-Item -Path $templatePath -Destination $DestPath -Force
    }

    # 1. Interface file
    Write-InfoLog "Copying IPhysicsService interface from template"
    Copy-Template "templates/domains/physics/interfaces/IPhysicsService.ts.template" (Join-Path $interfacesPath "IPhysicsService.ts")
    Write-SuccessLog "IPhysicsService generated"

    # 2. Types file
    Write-InfoLog "Copying physics.types definitions from template"
    Copy-Template "templates/domains/physics/types/physics.types.ts.template" (Join-Path $typesPath "physics.types.ts")
    Write-SuccessLog "physics.types generated"

    # 3. Service implementation
    Write-InfoLog "Copying PhysicsService implementation from template"
    Copy-Template "templates/domains/physics/services/PhysicsService.ts.template" (Join-Path $servicesPath "PhysicsService.ts")
    Write-SuccessLog "PhysicsService generated"

    # 4. Worker stub
    Write-InfoLog "Copying physicsWorker stub from template"
    Copy-Template "templates/domains/physics/workers/physicsWorker.ts.template" (Join-Path $workersPath "physicsWorker.ts")
    Write-SuccessLog "physicsWorker stub generated"

    # 5. Domain index exporter
    Write-InfoLog "Generating physics domain export index"
    $indexContent = @'
/**
 * @fileoverview Physics Domain Exports
 * @description Main export file for Physics domain (generated by script)
 * @version 1.0.0
 */

// Service exports
export { PhysicsService, physicsService } from "./services/PhysicsService"

// Interface exports
export type {
  IPhysicsService,
  PhysicsConfig,
  ParticlePhysics,
  Transform,
  PhysicsMetrics
} from "./interfaces/IPhysicsService"

// Type exports
export type {
  PhysicsAlgorithm,
  CollisionMethod,
  DistributionPattern,
  InterpolationType,
  GeometryBounds,
  PhysicsState
} from "./types/physics.types"
'@
    Set-Content -Path (Join-Path $physicsDomainPath "index.ts") -Value $indexContent -Encoding UTF8
    Write-SuccessLog "Physics domain export index generated"

    Write-SuccessLog "Physics Service generation completed successfully"
    Write-InfoLog "Generated files:"
    Write-InfoLog "  - src/domains/physics/interfaces/IPhysicsService.ts"
    Write-InfoLog "  - src/domains/physics/types/physics.types.ts"
    Write-InfoLog "  - src/domains/physics/services/PhysicsService.ts"
    Write-InfoLog "  - src/domains/physics/workers/physicsWorker.ts"
    Write-InfoLog "  - src/domains/physics/index.ts"

    exit 0
} catch {
    Write-ErrorLog "Physics Service generation failed: $($_.Exception.Message)"
    exit 1
} finally {
    try { Pop-Location -ErrorAction SilentlyContinue } catch { }
} 